/**
 * DEOBFUSCATED JAVASCRIPT SOURCE CODE
 * Original: Heavily obfuscated browser extension code
 * Components: WAV Encoder + Browser Detection + Extension API Wrapper
 * Deobfuscated by: Advanced AST Analysis
 */

// ================================
// PART 1: WAV AUDIO ENCODER MODULE
// ================================

(function() {
    "use strict";
    
    var audioModules = {
        4665: function(module) {
            // Helper function to write string to DataView
            function writeString(dataView, offset, string) {
                for (var i = 0; i < string.length; i++) {
                    dataView.setUint8(offset + i, string.charCodeAt(i));
                }
            }
            
            // Main WAV encoding function
            module.exports = function(audioBuffer, options) {
                options = options || {};
                
                var numberOfChannels = audioBuffer.numberOfChannels;
                var sampleRate = audioBuffer.sampleRate;
                var format = options.float32 ? 3 : 1; // 3 = float32, 1 = PCM
                var bitDepth = format === 3 ? 32 : 16;
                
                return function(audioData, format, sampleRate, numberOfChannels, bitDepth) {
                    var bytesPerSample = bitDepth / 8;
                    var blockAlign = numberOfChannels * bytesPerSample;
                    var buffer = new ArrayBuffer(44 + audioData.length * bytesPerSample);
                    var dataView = new DataView(buffer);
                    
                    // WAV Header
                    writeString(dataView, 0, "RIFF");
                    dataView.setUint32(4, 36 + audioData.length * bytesPerSample, true);
                    writeString(dataView, 8, "WAVE");
                    writeString(dataView, 12, "fmt ");
                    dataView.setUint32(16, 16, true); // Subchunk1Size
                    dataView.setUint16(20, format, true); // AudioFormat
                    dataView.setUint16(22, numberOfChannels, true);
                    dataView.setUint32(24, sampleRate, true);
                    dataView.setUint32(28, sampleRate * blockAlign, true);
                    dataView.setUint16(32, blockAlign, true);
                    dataView.setUint16(34, bitDepth, true);
                    writeString(dataView, 36, "data");
                    dataView.setUint32(40, audioData.length * bytesPerSample, true);
                    
                    // Audio Data
                    if (format === 1) {
                        // PCM 16-bit
                        for (var i = 0, offset = 44; i < audioData.length; i++, offset += 2) {
                            var sample = Math.max(-1, Math.min(1, audioData[i]));
                            dataView.setInt16(offset, sample < 0 ? sample * 32768 : sample * 32767, true);
                        }
                    } else {
                        // Float32
                        for (var i = 0, offset = 44; i < audioData.length; i++, offset += 4) {
                            dataView.setFloat32(offset, audioData[i], true);
                        }
                    }
                    
                    return buffer;
                }(
                    // Interleave channels if stereo
                    numberOfChannels === 2 ? 
                        function(leftChannel, rightChannel) {
                            var length = leftChannel.length + rightChannel.length;
                            var result = new Float32Array(length);
                            var index = 0;
                            var inputIndex = 0;
                            
                            for (var i = 0; i < length;) {
                                result[i++] = leftChannel[inputIndex];
                                result[i++] = rightChannel[inputIndex];
                                inputIndex++;
                            }
                            return result;
                        }(audioBuffer.getChannelData(0), audioBuffer.getChannelData(1)) :
                        audioBuffer.getChannelData(0),
                    format,
                    numberOfChannels,
                    sampleRate,
                    bitDepth
                );
            };
        },
        
        // ================================
        // PART 2: MODULE LOADER SYSTEM
        // ================================
        
        9033: function(module) {
            module.exports = function(modules) {
                var installedModules = {};
                
                function require(moduleId) {
                    if (installedModules[moduleId]) {
                        return installedModules[moduleId].exports;
                    }
                    
                    var module = installedModules[moduleId] = {
                        id: moduleId,
                        loaded: false,
                        exports: {}
                    };
                    
                    modules[moduleId].call(module.exports, module, module.exports, require);
                    module.loaded = true;
                    
                    return module.exports;
                }
                
                require.modules = modules;
                require.cache = installedModules;
                require.define = function(name, deps, factory) {
                    require.has(name) || Object.defineProperty(name, deps, {
                        enumerable: true,
                        get: factory
                    });
                };
                require.resolve = function(name) {
                    if (deps & 1 && (name = require(name)), deps & 8) return name;
                    if (deps & 4 && typeof name === "object" && name && name.__esModule) return name;
                    
                    var ns = Object.create(null);
                    require.defineProperty(ns);
                    Object.defineProperty(ns, "default", {
                        enumerable: true,
                        value: name
                    });
                    
                    if (deps & 2 && typeof name !== "string") {
                        for (var key in name) {
                            require.define(ns, key, function(key) {
                                return name[key];
                            }.bind(null, key));
                        }
                    }
                    return ns;
                };
                require.getDefaultExport = function(name) {
                    var getter = name && name.__esModule ?
                        function() { return name.default; } :
                        function() { return name; };
                    require.define(getter, "default", getter);
                    return getter;
                };
                require.has = function(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                };
                require.publicPath = "";
                
                return require(require.startModule = 90);
            }({
                // ================================
                // PART 3: BROWSER DETECTION UTILS
                // ================================
                
                17: function(module, exports, require) {
                    "use strict";
                    
                    exports.__esModule = true;
                    exports.default = void 0;
                    
                    var constants = require(18);
                    
                    var Utils = function() {
                        function Utils() {}
                        
                        Utils.getFirstMatch = function(regex, text) {
                            var match = text.match(regex);
                            return match && match.length > 0 && match[1] || "";
                        };
                        
                        Utils.getSecondMatch = function(regex, text) {
                            var match = text.match(regex);
                            return match && match.length > 1 && match[2] || "";
                        };
                        
                        Utils.matchAndReturnConst = function(regex, text, constant) {
                            if (regex.test(text)) return constant;
                        };
                        
                        Utils.getWindowsVersionName = function(version) {
                            switch (version) {
                                case "NT": return "NT";
                                case "XP": case "NT 5.1": return "XP";
                                case "NT 5.0": return "2000";
                                case "NT 5.2": return "2003";
                                case "NT 6.0": return "Vista";
                                case "NT 6.1": return "7";
                                case "NT 6.2": return "8";
                                case "NT 6.3": return "8.1";
                                case "NT 10.0": return "10";
                                default: return;
                            }
                        };
                        
                        Utils.getMacOSVersionName = function(version) {
                            var versionParts = version.split(".").splice(0, 2).map(function(v) {
                                return parseInt(v, 10) || 0;
                            });
                            
                            versionParts.push(0);
                            
                            if (versionParts[0] === 10) {
                                switch (versionParts[1]) {
                                    case 5: return "Leopard";
                                    case 6: return "Snow Leopard";
                                    case 7: return "Lion";
                                    case 8: return "Mountain Lion";
                                    case 9: return "Mavericks";
                                    case 10: return "Yosemite";
                                    case 11: return "El Capitan";
                                    case 12: return "Sierra";
                                    case 13: return "High Sierra";
                                    case 14: return "Mojave";
                                    case 15: return "Catalina";
                                    default: return;
                                }
                            }
                        };
                        
                        Utils.getAndroidVersionName = function(version) {
                            var versionParts = version.split(".").splice(0, 2).map(function(v) {
                                return parseInt(v, 10) || 0;
                            });
                            
                            versionParts.push(0);
                            
                            if (!(versionParts[0] === 1 && versionParts[1] < 5)) {
                                return versionParts[0] === 1 && versionParts[1] < 6 ? "Cupcake" :
                                       versionParts[0] === 1 && versionParts[1] >= 6 ? "Donut" :
                                       versionParts[0] === 2 && versionParts[1] < 2 ? "Eclair" :
                                       versionParts[0] === 2 && versionParts[1] === 2 ? "Froyo" :
                                       versionParts[0] === 2 && versionParts[1] > 2 ? "Gingerbread" :
                                       versionParts[0] === 3 ? "Honeycomb" :
                                       versionParts[0] === 4 && versionParts[1] < 1 ? "Ice Cream Sandwich" :
                                       versionParts[0] === 4 && versionParts[1] < 4 ? "Jelly Bean" :
                                       versionParts[0] === 4 && versionParts[1] >= 4 ? "KitKat" :
                                       versionParts[0] === 5 ? "Lollipop" :
                                       versionParts[0] === 6 ? "Marshmallow" :
                                       versionParts[0] === 7 ? "Nougat" :
                                       versionParts[0] === 8 ? "Oreo" :
                                       versionParts[0] === 9 ? "Pie" : void 0;
                            }
                        };
                        
                        Utils.getVersionPrecision = function(version) {
                            return version.split(".").length;
                        };
                        
                        Utils.compareVersions = function(versionA, versionB, isLoose) {
                            if (isLoose === void 0) isLoose = false;
                            
                            var precisionA = Utils.getVersionPrecision(versionA);
                            var precisionB = Utils.getVersionPrecision(versionB);
                            var precision = Math.max(precisionA, precisionB);
                            var lastPrecision = 0;
                            
                            var chunks = Utils.map([versionA, versionB], function(version) {
                                var delta = precision - Utils.getVersionPrecision(version);
                                var padded = version + new Array(delta + 1).join(".0");
                                return Utils.map(padded.split("."), function(chunk) {
                                    return new Array(20 - chunk.length).join("0") + chunk;
                                }).reverse();
                            });
                            
                            if (isLoose) {
                                lastPrecision = precision - Math.min(precisionA, precisionB);
                            }
                            
                            precision -= 1;
                            
                            while (precision >= lastPrecision) {
                                if (chunks[0][precision] > chunks[1][precision]) return 1;
                                if (chunks[0][precision] === chunks[1][precision]) {
                                    if (precision === lastPrecision) return 0;
                                    precision -= 1;
                                } else if (chunks[0][precision] < chunks[1][precision]) return -1;
                            }
                        };
                        
                        Utils.map = function(arr, iterator) {
                            var result = [];
                            if (Array.prototype.map) {
                                return Array.prototype.map.call(arr, iterator);
                            }
                            for (var i = 0; i < arr.length; i++) {
                                result.push(iterator(arr[i]));
                            }
                            return result;
                        };
                        
                        Utils.find = function(arr, predicate) {
                            var result, length;
                            if (Array.prototype.find) {
                                return Array.prototype.find.call(arr, predicate);
                            }
                            for (var i = 0, length = arr.length; i < length; i++) {
                                var value = arr[i];
                                if (predicate(value, i)) return value;
                            }
                        };
                        
                        Utils.assign = function(target) {
                            var sources = [];
                            for (var i = 1; i < arguments.length; i++) {
                                sources[i - 1] = arguments[i];
                            }
                            
                            if (Object.assign) {
                                return Object.assign.apply(Object, [target].concat(sources));
                            }
                            
                            var assignObject = function(source) {
                                if (typeof source === "object" && source !== null) {
                                    Object.keys(source).forEach(function(key) {
                                        target[key] = source[key];
                                    });
                                }
                            };
                            
                            for (var i = 0; i < sources.length; i++) {
                                assignObject();
                            }
                            
                            return target;
                        };
                        
                        Utils.getBrowserAlias = function(browserName) {
                            return constants.BROWSER_ALIASES_MAP[browserName];
                        };
                        
                        Utils.getBrowserTypeByAlias = function(alias) {
                            return constants.BROWSER_MAP[alias] || "";
                        };
                        
                        return Utils;
                    }();
                    
                    exports.default = Utils;
                    module.exports = exports.default;
                },
                
                // ================================
                // PART 4: BROWSER/OS CONSTANTS
                // ================================
                
                18: function(module, exports, require) {
                    "use strict";
                    
                    exports.__esModule = true;
                    exports.ENGINE_MAP = exports.OS_MAP = exports.PLATFORMS_MAP = exports.BROWSER_MAP = exports.BROWSER_ALIASES_MAP = void 0;
                    
                    exports.BROWSER_ALIASES_MAP = {
                        "Amazon Silk": "amazon_silk",
                        "Android Browser": "android",
                        "Bada": "bada",
                        "BlackBerry": "blackberry",
                        "Chrome": "chrome",
                        "Chromium": "chromium",
                        "Electron": "electron",
                        "Epiphany": "epiphany",
                        "Firefox": "firefox",
                        "Focus": "focus",
                        "Generic": "generic",
                        "Google Search": "google_search",
                        "Googlebot": "googlebot",
                        "Internet Explorer": "ie",
                        "K-Meleon": "k_meleon",
                        "Maxthon": "maxthon",
                        "Microsoft Edge": "edge",
                        "Miui Browser": "miui",
                        "NAVER Whale Browser": "naver",
                        "Opera": "opera",
                        "Opera Coast": "opera_coast",
                        "PhantomJS": "phantomjs",
                        "Puffin": "puffin",
                        "QupZilla": "qupzilla",
                        "QQ Browser": "qq",
                        "QQLite": "qqlite",
                        "Safari": "safari",
                        "Sailfish": "sailfish",
                        "Samsung Internet for Android": "samsung_internet",
                        "SeaMonkey": "seamonkey",
                        "Sleipnir": "sleipnir",
                        "Swing": "swing",
                        "Tizen": "tizen",
                        "UC Browser": "uc",
                        "Vivaldi": "vivaldi",
                        "WebOS Browser": "webos",
                        "WeChat": "wechat",
                        "Yandex Browser": "yandex",
                        "Roku": "roku"
                    };
                    
                    exports.BROWSER_MAP = {
                        amazon_silk: "Amazon Silk",
                        android: "Android Browser",
                        bada: "Bada",
                        blackberry: "BlackBerry",
                        chrome: "Chrome",
                        chromium: "Chromium",
                        electron: "Electron",
                        epiphany: "Epiphany",
                        firefox: "Firefox",
                        focus: "Focus",
                        generic: "Generic",
                        googlebot: "Googlebot",
                        google_search: "Google Search",
                        ie: "Internet Explorer",
                        k_meleon: "K-Meleon",
                        maxthon: "Maxthon",
                        edge: "Microsoft Edge",
                        miui: "Miui Browser",
                        naver: "NAVER Whale Browser",
                        opera: "Opera",
                        opera_coast: "Opera Coast",
                        phantomjs: "PhantomJS",
                        puffin: "Puffin",
                        qupzilla: "QupZilla",
                        qq: "QQ Browser",
                        qqlite: "QQ Browser Lite",
                        safari: "Safari",
                        sailfish: "Sailfish",
                        samsung_internet: "Samsung Internet for Android",
                        seamonkey: "SeaMonkey",
                        sleipnir: "Sleipnir",
                        swing: "Swing",
                        tizen: "Tizen",
                        uc: "UC Browser",
                        vivaldi: "Vivaldi",
                        webos: "WebOS Browser",
                        wechat: "WeChat",
                        yandex: "Yandex Browser"
                    };
                    
                    exports.PLATFORMS_MAP = {
                        tablet: "tablet",
                        mobile: "mobile",
                        desktop: "desktop",
                        tv: "tv"
                    };
                    
                    exports.OS_MAP = {
                        WindowsPhone: "Windows Phone",
                        Windows: "Windows",
                        MacOS: "macOS",
                        iOS: "iOS",
                        Android: "Android",
                        WebOS: "WebOS",
                        BlackBerry: "BlackBerry",
                        Bada: "Bada",
                        Tizen: "Tizen",
                        Linux: "Linux",
                        ChromeOS: "Chrome OS",
                        PlayStation4: "PlayStation 4",
                        Roku: "Roku"
                    };
                    
                    exports.ENGINE_MAP = {
                        EdgeHTML: "EdgeHTML",
                        Blink: "Blink",
                        Trident: "Trident",
                        Presto: "Presto",
                        Gecko: "Gecko",
                        WebKit: "WebKit"
                    };
                },
                
                // ================================
                // PART 5: MAIN BOWSER CLASS
                // ================================
                
                90: function(module, exports, require) {
                    "use strict";
                    
                    exports.__esModule = true;
                    exports.default = void 0;
                    
                    var Parser = require(91);
                    var constants = require(18);
                    
                    var Bowser = function() {
                        function Bowser() {}
                        
                        Bowser.getParser = function(userAgent, skipParsing) {
                            if (skipParsing === void 0) skipParsing = false;
                            if (typeof userAgent !== "string") {
                                throw new Error("UserAgent should be a string");
                            }
                            return new Parser.default(userAgent, skipParsing);
                        };
                        
                        Bowser.parse = function(userAgent) {
                            return new Parser.default(userAgent).getResult();
                        };
                        
                        // Static properties
                        Object.defineProperty(Bowser, "BROWSER_MAP", {
                            get: function() { return constants.BROWSER_MAP; }
                        });
                        Object.defineProperty(Bowser, "ENGINE_MAP", {
                            get: function() { return constants.ENGINE_MAP; }
                        });
                        Object.defineProperty(Bowser, "OS_MAP", {
                            get: function() { return constants.OS_MAP; }
                        });
                        Object.defineProperty(Bowser, "PLATFORMS_MAP", {
                            get: function() { return constants.PLATFORMS_MAP; }
                        });
                        
                        return Bowser;
                    }();
                    
                    exports.default = Bowser;
                    module.exports = exports.default;
                },
                
                // ================================
                // PART 6: BROWSER DETECTION PARSER
                // ================================
                
                91: function(module, exports, require) {
                    "use strict";
                    
                    exports.__esModule = true;
                    exports.default = void 0;
                    
                    var browsersList = require(92);
                    var osList = require(93);
                    var platformsList = require(94);
                    var enginesList = require(95);
                    var utils = require(17);
                    
                    var Parser = function() {
                        function Parser(userAgent, skipParsing) {
                            if (skipParsing === void 0) skipP
